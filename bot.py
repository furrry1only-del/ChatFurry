# bot.py
import asyncio
import csv
import json
import os
import re
from collections import defaultdict
from datetime import datetime
from pathlib import Path
from typing import Optional, Tuple

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

# === CONFIG ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is required")

CHANNEL_ID = int(os.getenv("CHANNEL_ID", "-1002808799226"))
MODERATION_GROUP = int(os.getenv("MODERATION_GROUP", "-1002935218273"))
BOT_LINK = os.getenv("BOT_LINK", "https://t.me/Git_fan_bot")

CARD_NUMBER = os.getenv("CARD_NUMBER")
if not CARD_NUMBER:
    raise ValueError("CARD_NUMBER environment variable is required")

LOGS_FILE = Path("logs.csv")
MOD_FILE = Path("moderators.json")
POSTS_FILE = Path("posts.json")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# === STORAGE ===
pending_posts = {}     
paid_requests = {}
media_groups_buffer = defaultdict(list)     

if MOD_FILE.exists():
    moderator_names = json.loads(MOD_FILE.read_text(encoding="utf-8"))
else:
    moderator_names = {}
    MOD_FILE.write_text("{}", encoding="utf-8")

if POSTS_FILE.exists():
    try:
        posts_data = json.loads(POSTS_FILE.read_text(encoding="utf-8"))
    except Exception:
        posts_data = {}
else:
    posts_data = {}
    POSTS_FILE.write_text("{}", encoding="utf-8")

# === HELPERS ===
    def now_str():
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –ø–æ –ö–∏—î–≤—É —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD HH:MM:SS"""
        return datetime.now(ZoneInfo("Europe/Kyiv")).strftime("%Y-%m-%d %H:%M:%S")

def save_posts():
    POSTS_FILE.write_text(json.dumps(posts_data, ensure_ascii=False, indent=2), encoding="utf-8")
def log_action(action: str, moderator: str = "-", user: str = "-", extra: str = ""):
    # –°–ª–æ–≤–Ω–∏–∫ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥—ñ–π
    action_map = {
        "start": "–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º",
        "ask_send_post": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ—Å—Ç",
        "post_submitted": "–ü–æ—Å—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é",
        "proof_sent_to_mods": "–î–æ–∫–∞–∑ –æ–ø–ª–∞—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º",
        "post_approved": "–ü–æ—Å—Ç —Å—Ö–≤–∞–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º",
        "post_rejected": "–ü–æ—Å—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º",
        "evidence_requested": "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∏–≤ –¥–æ–∫–∞–∑–∏",
        "ask_info_start": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å —á–∏–π –ø–æ—Å—Ç",
        "ask_delete_start": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å—Ç",
        "user_sent_link": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ—Å—Ç",
        "select_action_post_not_found": "–ü–æ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ",
        "payment_requested": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –¥–ª—è –æ–ø–ª–∞—Ç–∏",
        "mod_confirm_info_sent": "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –æ–ø–ª–∞—Ç—É —ñ –≤—ñ–¥–ø—Ä–∞–≤–∏–≤ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É",
        "mod_confirm_deleted": "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –æ–ø–ª–∞—Ç—É —ñ –≤–∏–¥–∞–ª–∏–≤ –ø–æ—Å—Ç",
        "mod_confirm_post_not_found": "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –æ–ø–ª–∞—Ç—É, –∞–ª–µ –ø–æ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
        "mod_rejected_payment": "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤—ñ–¥—Ö–∏–ª–∏–≤ –¥–æ–∫–∞–∑ –æ–ø–ª–∞—Ç–∏",
        "mod_delete_failed": "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å—Ç",
    }


    ts = now_str()
    translated = action_map.get(action, action)
    row = [ts, moderator, user, translated, extra]

    new_file = not LOGS_FILE.exists()
    with open(LOGS_FILE, "a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        if new_file:
            writer.writerow(["—á–∞—Å", "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä", "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á", "–¥—ñ—è", "–¥–æ–¥–∞—Ç–∫–æ–≤–∞_—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"])
        writer.writerow(row)

def auto_footer(text: str) -> str:
    return f"{text}\n\nüëâ <b>–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É:</b> <a href='{BOT_LINK}'>{BOT_LINK}</a>\n‚ö° <b>–°—É—Ç–Ω—ñ—Å—Ç—å UA ONLINE:</b> <a href='https://t.me/sutnistua'>@sutnistua</a>"

def pretty_caption(post_id: int, user: str) -> str:
    return (
        f"üì∞ <b>–ù–û–í–ò–ô –ü–û–°–¢ #{post_id}</b>\n"
        f"üë§ –í—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: @{user}\n\n"
        "üîç –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä, –æ–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ üëá"
    )

def parse_tg_link(text: str) -> Optional[Tuple[str, int]]:
    m = re.search(r"(?:https?://)?t\.me/([^/]+)/(\d+)", text.strip())
    if not m:
        return None
    return (m.group(1), int(m.group(2)))

def find_post_by_msgid(msg_id: int) -> Optional[dict]:
    return posts_data.get(str(msg_id))

# === KEYBOARD ===
def main_kb():
    kb = ReplyKeyboardBuilder()
    kb.button(text="üì® –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ—Å—Ç")
    kb.button(text="üë§ –î—ñ–∑–Ω–∞—Ç–∏—Å—å —á–∏–π –ø–æ—Å—Ç")
    kb.button(text="üóë –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å—Ç")
    kb.adjust(1)
    return kb.as_markup(resize_keyboard=True)

# === START ===
@dp.message(CommandStart())
async def start_cmd(m: Message):
    await m.answer("üëã –í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:", reply_markup=main_kb())
    log_action("start", user=str(m.from_user.id))

# === CREATE POST (USER) ===
@dp.message(F.text == "üì® –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ—Å—Ç")
async def ask_post(m: Message):
    await m.answer("üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º –¥–æ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó.")
    log_action("ask_send_post", user=str(m.from_user.id))

@dp.message(F.media_group_id)
async def handle_album(m: Message):
    """–û–±—Ä–æ–±–∫–∞ –∞–ª—å–±–æ–º—ñ–≤ (–∫—ñ–ª—å–∫–∞ —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º)"""
    media_groups_buffer[m.media_group_id].append(m)
    await asyncio.sleep(1)
    if m.media_group_id not in media_groups_buffer:
        return

    album_messages = media_groups_buffer.pop(m.media_group_id)
    uid = str(m.from_user.id)

    media_group = []
    caption = None
    for msg in album_messages:
        if msg.photo:
            media_group.append(("photo", msg.photo[-1].file_id))
        elif msg.video:
            media_group.append(("video", msg.video.file_id))
        if msg.caption and not caption:
            caption = msg.caption

    if not caption:
        await m.answer("‚ö†Ô∏è –î–æ–¥–∞–π—Ç–µ –ø—ñ–¥–ø–∏—Å –¥–æ –∞–ª—å–±–æ–º—É.")
        return

    post_id = len(pending_posts) + 1
    pending_posts[post_id] = {
        "id": post_id,
        "user_id": m.from_user.id,
        "username": m.from_user.username or m.from_user.full_name,
        "media": media_group,
        "caption": caption,
        "status": "pending",
        "created": now_str(),
        "is_album": True,
    }

    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"approve:{post_id}")
    kb.button(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject:{post_id}")
    kb.button(text="üìé –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥–æ–∫–∞–∑–∏", callback_data=f"request_evidence:{post_id}")
    kb.adjust(2)

    text = pretty_caption(post_id, pending_posts[post_id]["username"])
    media_to_send = []
    for i, (m_type, file_id) in enumerate(media_group):
        if i == 0:
            if m_type == "photo":
                media_to_send.append({"type": "photo", "media": file_id, "caption": f"{text}\n\nüìù {caption}"})
            else:
                media_to_send.append({"type": "video", "media": file_id, "caption": f"{text}\n\nüìù {caption}"})
        else:
            media_to_send.append({"type": m_type, "media": file_id})

    await bot.send_media_group(MODERATION_GROUP, media=media_to_send)
    await bot.send_message(MODERATION_GROUP, "‚¨ÜÔ∏è –ù–æ–≤–∏–π –∞–ª—å–±–æ–º –æ—á—ñ–∫—É—î –º–æ–¥–µ—Ä–∞—Ü—ñ—ó:", reply_markup=kb.as_markup())

    await m.answer("‚úÖ –í–∞—à –ø–æ—Å—Ç (–∞–ª—å–±–æ–º) –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é. –û—á—ñ–∫—É–π—Ç–µ —Ä—ñ—à–µ–Ω–Ω—è.")
    log_action("post_submitted", user=str(m.from_user.id), extra=f"post_id={post_id}, album={len(media_group)}")

@dp.message(F.photo | F.video)
async def handle_single_media(m: Message):
    uid = str(m.from_user.id)
    # --- –û–±—Ä–æ–±–∫–∞ –¥–æ–∫–∞–∑—ñ–≤ –æ–ø–ª–∞—Ç–∏ ---
    if uid in paid_requests and paid_requests[uid]["status"] == "awaiting_proof":
        entry = paid_requests[uid]
        action = entry["action"]
        target_msg_id = entry["target_msg_id"]
        requester_username = m.from_user.username or m.from_user.full_name

        text = (f"üí≥ –î–æ–∫–∞–∑ –æ–ø–ª–∞—Ç–∏ –¥–ª—è –¥—ñ—ó <b>{action}</b>\n"
                f"–ó–∞–ø–∏—Ç—É–≤–∞—á: @{requester_username} (id: {uid})\n"
                f"–¶—ñ–ª—å–æ–≤–∏–π –ø–æ—Å—Ç: {target_msg_id}\n"
                f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ: {now_str()}")

        kb = InlineKeyboardBuilder()
        kb.button(text="‚úÖ –û–ø–ª–∞—á–µ–Ω–æ", callback_data=f"moderator_confirm_payment:{uid}:{target_msg_id}:{action}")
        kb.button(text="üö´ –í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –æ–ø–ª–∞—Ç—É", callback_data=f"moderator_reject_payment:{uid}:{target_msg_id}:{action}")
        kb.adjust(2)

        if m.photo:
            file_id = m.photo[-1].file_id
            await bot.send_photo(MODERATION_GROUP, file_id, caption=text, reply_markup=kb.as_markup())
        else:
            file_id = m.video.file_id
            await bot.send_video(MODERATION_GROUP, file_id, caption=text, reply_markup=kb.as_markup())

        paid_requests[uid]["status"] = "proof_sent"
        paid_requests[uid]["proof_sent_at"] = now_str()
        log_action("proof_sent_to_mods", user=uid, extra=f"target_msg_id={target_msg_id}, action={action}")
        await m.answer("‚úÖ –î–æ–∫–∞–∑ –æ—Ç—Ä–∏–º–∞–Ω–æ. –ú–∏ –ø–µ—Ä–µ—Å–ª–∞–ª–∏ –π–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏. –û—á—ñ–∫—É–π—Ç–µ —Ä—ñ—à–µ–Ω–Ω—è.")
        return

    # --- –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ ---
    caption = m.caption or ""
    if not caption.strip():
        await m.answer("‚ö†Ô∏è –î–æ–¥–∞–π—Ç–µ –ø—ñ–¥–ø–∏—Å –¥–æ —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ.")
        return

    post_id = len(pending_posts) + 1
    file_id = m.photo[-1].file_id if m.photo else m.video.file_id
    media_type = "photo" if m.photo else "video"

    pending_posts[post_id] = {
        "id": post_id,
        "user_id": m.from_user.id,
        "username": m.from_user.username or m.from_user.full_name,
        "file_id": file_id,
        "media_type": media_type,
        "caption": caption,
        "status": "pending",
        "created": now_str(),
        "is_album": False,
    }

    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"approve:{post_id}")
    kb.button(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject:{post_id}")
    kb.button(text="üìé –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥–æ–∫–∞–∑–∏", callback_data=f"request_evidence:{post_id}")
    kb.adjust(2)

    text = pretty_caption(post_id, pending_posts[post_id]["username"])
    if media_type == "photo":
        await bot.send_photo(MODERATION_GROUP, file_id, caption=f"{text}\n\nüìù {caption}", reply_markup=kb.as_markup())
    else:
        await bot.send_video(MODERATION_GROUP, file_id, caption=f"{text}\n\nüìù {caption}", reply_markup=kb.as_markup())

    await m.answer("‚úÖ –í–∞—à –ø–æ—Å—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é. –û—á—ñ–∫—É–π—Ç–µ —Ä—ñ—à–µ–Ω–Ω—è.")
    log_action("post_submitted", user=str(m.from_user.id), extra=f"post_id={post_id}")

# === MODERATION CALLBACKS ===
@dp.callback_query(F.data.startswith("approve:"))
async def approve_post(cb: CallbackQuery):
    post_id = int(cb.data.split(":", 1)[1])
    post = pending_posts.get(post_id)
    if not post or post["status"] != "pending":
        return await cb.answer("‚ö†Ô∏è –ü–æ—Å—Ç –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.", show_alert=True)
    post["status"] = "approved"
    caption = auto_footer(post["caption"])
    
    if post.get("is_album"):
        media_to_send = []
        for i, (m_type, file_id) in enumerate(post["media"]):
            if i == 0:
                if m_type == "photo":
                    media_to_send.append({"type": "photo", "media": file_id, "caption": caption})
                else:
                    media_to_send.append({"type": "video", "media": file_id, "caption": caption})
            else:
                media_to_send.append({"type": m_type, "media": file_id})
        
        sent_messages = await bot.send_media_group(CHANNEL_ID, media=media_to_send)
        sent = sent_messages[0]
    else:
        if post["media_type"] == "photo":
            sent = await bot.send_photo(CHANNEL_ID, post["file_id"], caption=caption)
        else:
            sent = await bot.send_video(CHANNEL_ID, post["file_id"], caption=caption)
    
    posts_data[str(sent.message_id)] = {
        "post_id": post_id,
        "author_id": post["user_id"],
        "author_username": post["username"],
        "author_phone": post.get("author_phone", ""),
        "publish_date": now_str(),
        "channel_id": CHANNEL_ID,
        "caption": post["caption"]
    }
    save_posts()
    await cb.message.edit_reply_markup(reply_markup=None)
    try:
        await bot.send_message(post["user_id"], "‚úÖ –í–∞—à –ø–æ—Å—Ç —Å—Ö–≤–∞–ª–µ–Ω–æ —ñ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ!")
    except:
        pass
    mod_name = moderator_names.get(str(cb.from_user.id), cb.from_user.full_name)
    log_action("post_approved", moderator=mod_name, user=str(post["user_id"]), extra=f"post_id={post_id}, channel_msg_id={sent.message_id}")
    await cb.answer("‚úÖ –ü–æ—Å—Ç —Å—Ö–≤–∞–ª–µ–Ω–æ —Ç–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!", show_alert=True)

@dp.callback_query(F.data.startswith("reject:"))
async def reject_post(cb: CallbackQuery):
    post_id = int(cb.data.split(":", 1)[1])
    post = pending_posts.get(post_id)
    if not post or post["status"] != "pending":
        return await cb.answer("‚ö†Ô∏è –ü–æ—Å—Ç –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.", show_alert=True)
    post["status"] = "rejected"
    await cb.message.edit_reply_markup(reply_markup=None)
    try:
        await bot.send_message(post["user_id"], "‚ùå –í–∞—à –ø–æ—Å—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
    except:
        pass
    mod_name = moderator_names.get(str(cb.from_user.id), cb.from_user.full_name)
    log_action("post_rejected", moderator=mod_name, user=str(post["user_id"]), extra=f"post_id={post_id}")
    await cb.answer("‚ùå –ü–æ—Å—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.", show_alert=True)

@dp.callback_query(F.data.startswith("request_evidence:"))
async def request_evidence(cb: CallbackQuery):
    post_id = int(cb.data.split(":", 1)[1])
    post = pending_posts.get(post_id)
    if not post or post["status"] != "pending":
        return await cb.answer("‚ö†Ô∏è –ù–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –ø–æ—Å—Ç–∞ –≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ.", show_alert=True)
    post["awaiting_evidence"] = True
    post["evidence_requested_by"] = cb.from_user.id
    await cb.message.edit_reply_markup(reply_markup=None)
    try:
        await bot.send_message(post["user_id"], f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Å–∏—Ç—å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ –¥–æ–∫–∞–∑ –¥–ª—è –≤–∞—à–æ–≥–æ –ø–æ—Å—Ç–∞ #{post_id}. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç—É—Ç –º–µ–¥—ñ–∞ (–≤–æ–Ω–æ –Ω–µ —Å—Ç–≤–æ—Ä–∏—Ç—å –Ω–æ–≤–∏–π –ø–æ—Å—Ç).")
    except:
        pass
    mod_name = moderator_names.get(str(cb.from_user.id), cb.from_user.full_name)
    log_action("evidence_requested", moderator=mod_name, user=str(post["user_id"]), extra=f"post_id={post_id}")
    await cb.answer("‚úÖ –ó–∞–ø–∏—Ç –Ω–∞ –¥–æ–∫–∞–∑–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.", show_alert=True)

# === USER BUTTONS ===
@dp.message(F.text == "üë§ –î—ñ–∑–Ω–∞—Ç–∏—Å—å —á–∏–π –ø–æ—Å—Ç")
async def ask_info(m: Message):
    await m.answer("‚ÑπÔ∏è –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ—Å—Ç (https://t.me/channel/123). –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —â–æ–¥–æ –æ–ø–ª–∞—Ç–∏ (25 –≥—Ä–Ω).")
    log_action("ask_info_start", user=str(m.from_user.id))

@dp.message(F.text == "üóë –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å—Ç")
async def ask_delete(m: Message):
    await m.answer("üóë –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ—Å—Ç (https://t.me/channel/123). –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —â–æ–¥–æ –æ–ø–ª–∞—Ç–∏ (50 –≥—Ä–Ω).")
    log_action("ask_delete_start", user=str(m.from_user.id))

@dp.message()
async def handle_links_and_other(m: Message):
    text = (m.text or "").strip()
    parsed = parse_tg_link(text)
    if not parsed:
        return
    channel_part, msg_id = parsed
    user_id = str(m.from_user.id)

    kb = InlineKeyboardBuilder()
    kb.button(text="–î—ñ–∑–Ω–∞—Ç–∏—Å—å (25 –≥—Ä–Ω)", callback_data=f"select_action:{user_id}:{msg_id}:info")
    kb.button(text="–í–∏–¥–∞–ª–∏—Ç–∏ (50 –≥—Ä–Ω)", callback_data=f"select_action:{user_id}:{msg_id}:delete")
    kb.adjust(2)

    await m.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è —Ü—å–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:", reply_markup=kb.as_markup())
    log_action("user_sent_link", user=user_id, extra=f"msg_id={msg_id}")

# === USER SELECT ACTION ===
@dp.callback_query(F.data.startswith("select_action:"))
async def select_action(cb: CallbackQuery):
    try:
        _, requester_id, msg_id, action = cb.data.split(":", 3)
    except:
        return await cb.answer("–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ.", show_alert=True)

    post = find_post_by_msgid(int(msg_id))
    if not post:
        await cb.answer("‚ùó –ü–æ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –±–∞–∑—ñ.", show_alert=True)
        log_action("select_action_post_not_found", user=requester_id, extra=f"msg_id={msg_id}")
        return

    price = 25 if action == "info" else 50
    text = (f"üí∞ –î–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥—ñ—ó <b>{'–î—ñ–∑–Ω–∞—Ç–∏—Å—å' if action=='info' else '–í–∏–¥–∞–ª–∏—Ç–∏'}</b> –Ω–∞–¥ –ø–æ—Å—Ç–æ–º {msg_id}\n"
            f"‚û§ –°—É–º–∞: {price} –≥—Ä–Ω\n"
            f"‚û§ –ü—Ä–æ–≤–µ–¥—ñ—Ç—å –æ–ø–ª–∞—Ç—É –Ω–∞ –∫–∞—Ä—Ç–∫—É:\n<b>{CARD_NUMBER}</b>\n"
            f'‚û§ –£ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É –≤–∫–∞–∂—ñ—Ç—å: "{action}"\n\n'
            "üîî –ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏: –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ —Å–∫—Ä—ñ–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–∞–∑—É —Å—é–¥–∏.")

    paid_requests[requester_id] = {
        "action": action,
        "target_msg_id": int(msg_id),
        "status": "awaiting_proof",
        "price": price,
        "requested_at": now_str()
    }
    log_action("payment_requested", user=requester_id, extra=f"action={action}, msg_id={msg_id}, price={price}")

    await cb.message.answer(text)
    await cb.answer("–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.", show_alert=True)

# === MODERATOR CONFIRM/REJECT PAYMENT ===
@dp.callback_query(F.data.startswith("moderator_confirm_payment:"))
async def moderator_confirm_payment(cb: CallbackQuery):
    try:
        _, requester_id, msg_id, action = cb.data.split(":", 3)
    except:
        return await cb.answer("–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ.", show_alert=True)

    entry = paid_requests.get(str(requester_id))
    if not entry or entry["target_msg_id"] != int(msg_id) or entry["action"] != action:
        return await cb.answer("–ó–∞–ø–∏—Ç –æ–ø–ª–∞—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)

    post = find_post_by_msgid(int(msg_id))
    if not post:
        await cb.answer("–ü–æ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        log_action("mod_confirm_post_not_found", moderator=str(cb.from_user.id), extra=f"msg_id={msg_id}")
        return

    if action == "info":
        info_lines = []
        if post.get("author_username"): info_lines.append(f"üë§ Telegram: @{post['author_username']}")
        if post.get("author_phone"): info_lines.append(f"‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: {post['author_phone']}")
        if post.get("publish_date"): info_lines.append(f"üìÖ –î–∞—Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {post['publish_date']}")
        info_text = "üßæ <b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–≤—Ç–æ—Ä–∞:</b>\n" + "\n".join(info_lines) if info_lines else "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        try: await bot.send_message(int(requester_id), info_text)
        except: pass
        paid_requests[str(requester_id)]["status"] = "completed"
        paid_requests[str(requester_id)]["completed_by"] = cb.from_user.id
        paid_requests[str(requester_id)]["completed_at"] = now_str()
        save_posts()
        log_action("mod_confirm_info_sent", moderator=str(cb.from_user.id), user=requester_id, extra=f"msg_id={msg_id}")
        await cb.answer("‚úÖ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Ç—É–≤–∞—á—É.", show_alert=True)
        return

    if action == "delete":
        try:
            await bot.delete_message(post["channel_id"], int(msg_id))
            try: await bot.send_message(int(requester_id), "üóëÔ∏è –ü–æ—Å—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
            except: pass
            paid_requests[str(requester_id)]["status"] = "completed"
            paid_requests[str(requester_id)]["completed_by"] = cb.from_user.id
            paid_requests[str(requester_id)]["completed_at"] = now_str()
            posts_data.pop(str(msg_id), None)
            save_posts()
            log_action("mod_confirm_deleted", moderator=str(cb.from_user.id), user=requester_id, extra=f"msg_id={msg_id}")
            await cb.answer("‚úÖ –ü–æ—Å—Ç –≤–∏–¥–∞–ª–µ–Ω–æ.", show_alert=True)
        except Exception as e:
            log_action("mod_delete_failed", moderator=str(cb.from_user.id), user=requester_id, extra=f"msg_id={msg_id}, err={e}")
            await cb.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å—Ç.", show_alert=True)

@dp.callback_query(F.data.startswith("moderator_reject_payment:"))
async def moderator_reject_payment(cb: CallbackQuery):
    try:
        _, requester_id, msg_id, action = cb.data.split(":", 3)
    except:
        return await cb.answer("–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ.", show_alert=True)

    paid_requests[str(requester_id)]["status"] = "rejected"
    paid_requests[str(requester_id)]["rejected_by"] = cb.from_user.id
    paid_requests[str(requester_id)]["rejected_at"] = now_str()
    try:
        await bot.send_message(int(requester_id), "‚ùå –î–æ–∫–∞–∑ –æ–ø–ª–∞—Ç–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≤—Ç–æ—Ä—ñ—Ç—å –æ–ø–ª–∞—Ç—É.")
    except: pass
    log_action("mod_rejected_payment", moderator=str(cb.from_user.id), user=requester_id, extra=f"msg_id={msg_id}")
    await cb.answer("‚úÖ –ó–∞–ø–∏—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ.", show_alert=True)

# === START BOT ===
async def main():
    """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª, —è–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞ –ø—Ä–∏ –∑–±–æ—è—Ö."""
    while True:
        try:
            await bot.delete_webhook(drop_pending_updates=True)
            print(f"[{now_str()}] ‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
            await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types(), timeout=60)
        except Exception as e:
            print(f"[{now_str()}] ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —É —Ä–æ–±–æ—Ç—ñ –±–æ—Ç–∞: {e}")
            await asyncio.sleep(5)  # –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥

if __name__ == "__main__":
    asyncio.run(main())
